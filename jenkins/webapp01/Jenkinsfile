def code_version

pipeline {
  agent any

  environment {
    GITHUB_ORG = "jeremymv2"
    GITHUB_REPO = "k8s_cicd"
    APP_PATH = "jenkins/webapp01"
    APP_IMAGE_REPO = "${DOCKERHUB_REGISTRY}"
    DEPLOYMENT_NAME = "p9-react-app"
  }

  stages {
    stage ('PREPARATION') {

      steps {
        script {
          code_version = sh(returnStdout: true, script: "node -e \"console.log(require('${WORKSPACE}/${APP_PATH}/package.json').version);\"").trim()
          echo "Repository Code Version: ${code_version}"
        }
      }
    }

    stage ('VERIFY') {
      // This Stage is responsible for validating the application (CI)

      when {
        branch "main"
        allOf {
          changeset "jenkins/webapp01/package.json"
        }
      }

      steps {
        // Commented out only because we want to speed everything up for demonstration purposes.
        // Uncomment in a real world scenario.
        // sh "npm install --prefer-offline --no-audit --prefix ${WORKSPACE}/${APP_PATH}"
        // sh "CI=true npm --prefix ${WORKSPACE}/${APP_PATH} test -- --coverage"
        echo "Would have run verification steps if not for demo environment."
      }
    }

    stage ('BUILD') {
      // This Stage is responsible for building and deploying the docker image.

      when {
        branch "main"
        allOf {
          changeset "jenkins/webapp01/package.json"
        }
      }

      environment {
        // make sure below credential is stored in Jenkins global credentials.
        registryCredential = 'dockerhub'
      }

      steps {
        script {
          def appimage = docker.build ("${DOCKERHUB_REGISTRY}:${code_version}", "--network host ${WORKSPACE}/${APP_PATH}")
          docker.withRegistry( '', registryCredential ) {
            appimage.push()
            appimage.push('latest')
          }
        }
      }
    }

    stage ('DEPLOY') {
      // This Stage is responsible for applying the application yaml files into K8s.

      when {
        branch "main"
        anyOf {
          changeset "jenkins/webapp01/package.json"
          changeset "jenkins/webapp01/k8s/**"
        }
      }

      environment {
        CODE_VERSION="${code_version}"
        KUBECONFIG_FILEPATH=credentials('k8s-kubeconfig')
      }


      steps {
        script {
          final String out = sh returnStdout:true, script: """
            ${WORKSPACE}/${APP_PATH}/util/deploy.sh ${DEPLOYMENT_NAME} $KUBECONFIG_FILEPATH
          """
          echo out
        }
      }
    }
  }
}
