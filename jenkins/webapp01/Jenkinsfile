pipeline {
    agent any
    environment {
      GITHUB_ORGANIZATION = "jeremymv2"
      GITHUB_REPO = "k8s_cicd"
      REPOSITORY_TAG="${DOCKERHUB_REGISTRY}:${env.BUILD_ID}"
      APP_PATH="jenkins/webapp01"
    }
    stages {
      stage ('PREPARATION') {
          steps {
                    // cleanWs()
                    // git credentialsId: 'GitHub', url: "https://github.com/${GITHUB_ORGANIZATION}/${GITHUB_REPO}"
                    git url: "https://github.com/${GITHUB_ORGANIZATION}/${GITHUB_REPO}"
          }
      }

      stage ('BUILD') {
          when {
                branch "main"
                anyOf {
                    changeset "jenkins/webapp01/package.json"
                }
          }

          steps {
            sh "rm -f ${WORKSPACE}/${APP_PATH}/package-lock.json"
            sh "node -e \"console.log(require('${WORKSPACE}/${APP_PATH}/package.json').version);\""
            sh "npm install --prefix ${WORKSPACE}/${APP_PATH}"
          }
      }

      stage ('PUBLISH') {
          when {
                branch "main"
                anyOf {
                    changeset "jenkins/webapp01/package.json"
                }
          }
          environment {
              // make sure below credential is stored in Jenkins global credentials.
              registryCredential = 'dockerhub'
          }
          steps {
              sh"docker builder prune --all --force"
              script {
                  def appimage = docker.build ("${DOCKERHUB_REGISTRY}:${env.BUILD_ID}", "--network host ${WORKSPACE}/${APP_PATH}")
                        docker.withRegistry( '', registryCredential ) {
                        appimage.push()
                        appimage.push('latest')
                   }
              }
              sh"docker system prune -f"
          }
      }
      stage ('DEPLOY') {
          when {
                branch "main"
                anyOf {
                    changeset "jenkins/webapp01/package.json"
                    changeset "jenkins/webapp01/k8s/**"
                }
          }
          steps {
              sh 'envsubst < ${WORKSPACE}/${APP_PATH}/k8s/app.yaml | kubectl apply -f -'
          }
        }
      }
}
