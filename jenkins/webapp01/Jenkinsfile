def code_version

pipeline {
    agent any
    environment {
      GITHUB_ORGANIZATION = "jeremymv2"
      GITHUB_REPO = "k8s_cicd"
      APP_PATH = "jenkins/webapp01"
      APP_IMAGE_REPO = "${DOCKERHUB_REGISTRY}"
    }
    stages {
      stage ('PREPARATION') {
          steps {
              cleanWs()
              git branch: 'main', credentialsId: 'GitHub', url: "https://github.com/${GITHUB_ORGANIZATION}/${GITHUB_REPO}"
              script {
                  code_version = sh(returnStdout: true, script: "node -e \"console.log(require('${WORKSPACE}/${APP_PATH}/package.json').version);\"").trim()
                  echo "Repository Code Version: ${code_version}"
              }
          }
      }

      stage ('VERIFY') {
          when {
                branch "main"
                allOf {
                    changeset "jenkins/webapp01/package.json"
                }
          }

          steps {
            sh "npm install --prefix ${WORKSPACE}/${APP_PATH}"
            sh "CI=true npm --prefix ${WORKSPACE}/${APP_PATH} test -- --coverage"
          }
      }

      stage ('BUILD') {
          when {
                branch "main"
                allOf {
                    changeset "jenkins/webapp01/package.json"
                }
          }
          environment {
              // make sure below credential is stored in Jenkins global credentials.
              registryCredential = 'dockerhub'
          }
          steps {
              sh"docker builder prune --all --force"
              script {
                  def appimage = docker.build ("${DOCKERHUB_REGISTRY}:${code_version}", "--network host ${WORKSPACE}/${APP_PATH}")
                        docker.withRegistry( '', registryCredential ) {
                        appimage.push()
                        appimage.push('latest')
                   }
              }
              sh"docker system prune -f"
          }
      }
      stage ('DEPLOY') {
          environment {
              CODE_VERSION="${code_version}"
          }
          // when {
          //      branch "main"
          //      anyOf {
          //          changeset "jenkins/webapp01/package.json"
          //          changeset "jenkins/webapp01/k8s/**"
          //      }
          //}
          steps {
              // sh 'envsubst < ${WORKSPACE}/${APP_PATH}/k8s/app.yaml | kubectl apply -f -'
              sh """
                cd ${WORKSPACE}/${APP_PATH}
                for f in k8s/*yaml; do
                  echo "Getting commit SHA for: \$f"
                  # COMMIT_SHA="\$(git log -n 1 --all --pretty=format:%H -- \$f)"
                  COMMIT_SHA=\"FOOBAR\"
                  envsubst < \$f | kubectl apply -f -'
                done
              """
              sh 'kubectl rollout restart deploy/p9-react-app'
          }
        }
      }
}
